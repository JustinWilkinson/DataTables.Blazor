@using System.Text.Json
@inject IDataTablesInterop Datatables
@inject IDomEventListener DomEventListener
@implements IAsyncDisposable

<CascadingValue Value="this">
    <table @ref="_tableReference" @attributes=TableAttributes>
        @if (!IsDomSourced())
        {
            @* If SourceUrl or Data is provided, allow for the abbreviated syntax where all we need
                inside the DataTable component is a collection of Column components *@
            <thead>
                <tr>@ChildContent</tr>
            </thead>
        }
        else
        {
            @* We expect a full table structure inside the DataTable component *@
            @ChildContent
        }
    </table>
</CascadingValue>

@code {
    private ElementReference _tableReference;

    /// <summary>
    /// The child content of the component.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// HTML Attributes to apply to the table element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> TableAttributes { get; set; }

    /// <summary>
    /// A URL to retrieve data from.
    /// </summary>
    [Parameter]
    public string SourceUrl { get; set; }

    /// <summary>
    /// A C# object data source.
    /// </summary>
    [Parameter]
    public IDataset Data { get; set; }

    /// <summary>
    /// Specifies whether to automatically reload the datatable from the source when <see cref="ComponentBase.StateHasChanged"/> runs.
    /// </summary>
    [Parameter]
    public bool AutoReload { get; set; }

    /// <summary>
    /// The options for the <see cref="DataTable"/> component.
    /// </summary>
    [Parameter]
    public DataTableOptions Options { get; set; }

    /// <summary>
    /// The child <see cref="DataTableColumn"/> of the <see cref="DataTable"/> component.
    /// </summary>
    public List<DataTableColumn> Columns { get; set; } = new List<DataTableColumn>();

    #region "Events DataTable"

    /// <summary>
    /// A child row has been added or removed from the table.
    /// </summary>
    [Parameter]
    public EventCallback OnChildRowChanged { get; set; }

    /// <summary>
    /// Column sizing event - fired when the column widths are recalculated.
    /// </summary>
    [Parameter]
    public EventCallback OnColumnSizing { get; set; }

    /// <summary>
    /// Column visibility event - fired when the visibility of a column changes.
    /// </summary>
    [Parameter]
    public EventCallback OnColumnVisibility { get; set; }

    /// <summary>
    /// Table destroy event - fired when a table is destroyed.
    /// </summary>
    [Parameter]
    public EventCallback OnDestroy { get; set; }

    /// <summary>
    /// Draw event - fired once the table has completed a draw.
    /// </summary>
    [Parameter]
    public EventCallback OnDraw { get; set; }

    /// <summary>
    /// Error event - An error has occurred during DataTables' processing of data.
    /// </summary>
    [Parameter]
    public EventCallback OnError { get; set; }

    /// <summary>
    /// Initialisation complete event - fired when DataTables has been fully initialised and data loaded.
    /// </summary>
    [Parameter]
    public EventCallback OnInit { get; set; }

    /// <summary>
    ///Page length change event - fired when the page length is changed.
    /// </summary>
    [Parameter]
    public EventCallback OnLength { get; set; }

    /// <summary>
    /// Order event - fired when the data contained in the table is ordered.
    /// </summary>
    [Parameter]
    public EventCallback OnOrder { get; set; }

    /// <summary>
    /// Page change event - fired when the table's paging is updated.
    /// </summary>
    [Parameter]
    public EventCallback OnPage { get; set; }

    /// <summary>
    /// Pre-draw event - triggered as the table is about to be redrawn.
    /// </summary>
    [Parameter]
    public EventCallback OnPreDraw { get; set; }

    /// <summary>
    /// Initialisation started event - triggered immediately before data load.
    /// </summary>
    [Parameter]
    public EventCallback OnPreInit { get; set; }

    /// <summary>
    /// Ajax event - fired before an Ajax request is made.
    /// </summary>
    [Parameter]
    public EventCallback OnPreXhr { get; set; }

    /// <summary>
    /// Processing event - fired when DataTables is processing data.
    /// </summary>
    [Parameter]
    public EventCallback OnProcessing { get; set; }

    /// <summary>
    /// DataTables wants to display a child row.
    /// </summary>
    [Parameter]
    public EventCallback OnRequestChild { get; set; }

    /// <summary>
    /// Search event - fired when the table is filtered.
    /// </summary>
    [Parameter]
    public EventCallback OnSearch { get; set; }

    /// <summary>
    /// State load event - fired when loading state from storage.
    /// </summary>
    [Parameter]
    public EventCallback OnStateLoadParams { get; set; }

    /// <summary>
    /// State loaded event - fired once state has been loaded and applied.
    /// </summary>
    [Parameter]
    public EventCallback OnStateLoaded { get; set; }

    /// <summary>
    /// State save event - fired when saving table state information.
    /// </summary>
    [Parameter]
    public EventCallback OnStateSaveParams { get; set; }

    /// <summary>
    /// Ajax event - fired when an Ajax request is completed
    /// </summary>
    [Parameter]
    public EventCallback OnXhr { get; set; }

    /// <summary>
    /// On row click.
    /// </summary>
    [Parameter]
    public EventCallback OnRowClick { get; set; }

    #endregion

    /// <inheritdoc/>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitialiseAsync();
        }
        else if (AutoReload)
        {
            await ReloadAsync();
        }
    }

    /// <inheritdoc/>
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        // For DOM AutoReloads, we need to completely destroy the table, and start again.
        // To do so, we need to update whenever the ChildContent parameter is changed.
        if (parameters.TryGetValue<RenderFragment>(nameof(ChildContent), out var childContent))
        {
            if (AutoReload && IsDomSourced())
            {
                await ReInitialiseAsync();
            }
        }
    }

    /// <summary>
    /// Manually reload the datatable from its source. See <see cref="AutoReload"/> to automatically keep the table up to date.
    /// </summary>
    public async ValueTask ReloadAsync()
    {
        if (!string.IsNullOrWhiteSpace(SourceUrl))
        {
            await Datatables.AjaxReloadAsync(_tableReference);
        }
        else if (Data != null)
        {
            await Datatables.ReloadAsync(_tableReference, Data);
        }
        else if (!AutoReload && IsDomSourced()) // Don't reload DOM Sources - this is handled automatically when the child content changes, and will result in duplicate reloads if this isn't here.
        {
            await ReInitialiseAsync();
        }
    }

    /// <summary>
    /// Initializes a new one Datatable.
    /// </summary>
    public async ValueTask InitialiseAsync()
    {
        await AddEventListenersBeforeInitAsync();

        await Datatables.InitialiseAsync(_tableReference, DataTableOptions.FromComponent(this));

        await AddEventListenersAfterInitAsync();
    }


    /// <summary>
    /// Destroys the existing DataTable and initializes a new one in its place.
    /// </summary>
    public async ValueTask ReInitialiseAsync()
    {
        await Datatables.DestroyAsync(_tableReference);
        await InitialiseAsync();
    }

    /// <summary>
    /// Destroys the datatable component.
    /// </summary>
    public ValueTask DisposeAsync() => Datatables.DestroyAsync(_tableReference);

    private bool IsDomSourced() => string.IsNullOrWhiteSpace(SourceUrl) && Data == null;

    private async Task AddEventListenersBeforeInitAsync()
    {
        if (OnInit.HasDelegate)
            await AddEventListener(JsEventsConstants.Init, e => OnInit.InvokeAsync(e));

        if (OnXhr.HasDelegate)
            await AddEventListener(JsEventsConstants.Xhr, e => OnXhr.InvokeAsync(e));

        if (OnChildRowChanged.HasDelegate)
            await AddEventListener(JsEventsConstants.ChildRow, e => OnChildRowChanged.InvokeAsync(e));

        if (OnRequestChild.HasDelegate)
            await AddEventListener(JsEventsConstants.RequestChild, e => OnRequestChild.InvokeAsync(e));

        if (OnPreInit.HasDelegate)
            await AddEventListener(JsEventsConstants.PreInit, e => OnPreInit.InvokeAsync(e));

        if (OnPreXhr.HasDelegate)
            await AddEventListener(JsEventsConstants.PreXhr, e => OnPreXhr.InvokeAsync(e));

        if (OnError.HasDelegate)
            await AddEventListener(JsEventsConstants.Error, e => OnError.InvokeAsync(e));

        if (OnProcessing.HasDelegate)
            await AddEventListener(JsEventsConstants.Processing, e => OnProcessing.InvokeAsync(e));
    }

    private async Task AddEventListenersAfterInitAsync()
    {
        if (OnRowClick.HasDelegate)
            await AddEventListener(JsEventsConstants.OnRowClick, e => OnRowClick.InvokeAsync(e));

        if (OnColumnSizing.HasDelegate)
            await AddEventListener(JsEventsConstants.ColumnSizing, e => OnColumnSizing.InvokeAsync(e));

        if (OnColumnVisibility.HasDelegate)
            await AddEventListener(JsEventsConstants.ColumnVisibility, e => OnColumnVisibility.InvokeAsync(e));

        if (OnDestroy.HasDelegate)
            await AddEventListener(JsEventsConstants.Destroy, e => OnDestroy.InvokeAsync(e));

        if (OnDraw.HasDelegate)
            await AddEventListener(JsEventsConstants.Draw, e => OnDraw.InvokeAsync(e));

        if (OnLength.HasDelegate)
            await AddEventListener(JsEventsConstants.Length, e => OnLength.InvokeAsync(e));

        if (OnOrder.HasDelegate)
            await AddEventListener(JsEventsConstants.Order, e => OnOrder.InvokeAsync(e));

        if (OnPage.HasDelegate)
            await AddEventListener(JsEventsConstants.Page, e => OnPage.InvokeAsync(e));

        if (OnPreDraw.HasDelegate)
            await AddEventListener(JsEventsConstants.PreDraw, e => OnPreDraw.InvokeAsync(e));

        if (OnSearch.HasDelegate)
            await AddEventListener(JsEventsConstants.Search, e => OnSearch.InvokeAsync(e));

        if (OnStateLoadParams.HasDelegate)
            await AddEventListener(JsEventsConstants.StateLoadParams, e => OnStateLoadParams.InvokeAsync(e));

        if (OnStateLoaded.HasDelegate)
            await AddEventListener(JsEventsConstants.StateLoaded, e => OnStateLoaded.InvokeAsync(e));

        if (OnStateSaveParams.HasDelegate)
            await AddEventListener(JsEventsConstants.StateSaveParams, e => OnStateSaveParams.InvokeAsync(e));
    }

    private async Task AddEventListener(string eventName, Action<JsonElement> callback)
    {
        await DomEventListener.AddAsync<JsonElement>(_tableReference, eventName, callback);
    }
}